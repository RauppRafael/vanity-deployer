/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  VanityProxy,
  VanityProxyInterface,
} from "../../contracts/VanityProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405260405161026f38038061026f83398101604081905261002291610154565b61002b81610031565b50610184565b61003a81610071565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6100848161014260201b6100211760201c565b6100ea5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840160405180910390fd5b806101217f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61015160201b61003d1760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b03163b151590565b90565b60006020828403121561016657600080fd5b81516001600160a01b038116811461017d57600080fd5b9392505050565b60dd806101926000396000f3fe608060405236601057600e6013565b005b600e5b601f601b6040565b6084565b565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b6000607f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e80801560a2573d6000f35b3d6000fdfea26469706673582212200a6303873a0c73ad77de7049d8b72370c710d44675faec7073c522f7d43553f364736f6c63430008120033";

type VanityProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VanityProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VanityProxy__factory extends ContractFactory {
  constructor(...args: VanityProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _logic: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<VanityProxy> {
    return super.deploy(_logic, overrides || {}) as Promise<VanityProxy>;
  }
  override getDeployTransaction(
    _logic: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_logic, overrides || {});
  }
  override attach(address: string): VanityProxy {
    return super.attach(address) as VanityProxy;
  }
  override connect(signer: Signer): VanityProxy__factory {
    return super.connect(signer) as VanityProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VanityProxyInterface {
    return new utils.Interface(_abi) as VanityProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VanityProxy {
    return new Contract(address, _abi, signerOrProvider) as VanityProxy;
  }
}
